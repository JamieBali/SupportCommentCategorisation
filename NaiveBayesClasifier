{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPFHWVoL65RCPsoWWiEIR5y",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JamieBali/SupportCommentCategorisation/blob/main/NaiveBayesClasifier\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "N8ILkxf8U9kS",
        "outputId": "826d3978-d422-4b10-9036-3b1931e0f8b6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n"
          ]
        }
      ],
      "source": [
        "#set up drives for resources.  Change the path as necessary\n",
        "\n",
        "from google.colab import drive\n",
        "#mount google drive\n",
        "drive.mount('/content/drive/', force_remount=True)\n",
        "import sys\n",
        "sys.path.append('/content/drive/My Drive/ColabNotebooks')\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import nltk\n",
        "nltk.download('punkt')\n",
        "nltk.download('punkt_tab')\n",
        "nltk.download('stopwords')\n",
        "nltk.download('wordnet')\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "\n",
        "import re\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "import random"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yAqx6MLwiz1T",
        "outputId": "7544236d-e0f5-4af7-89a4-1fa32d1232c5"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package punkt to /root/nltk_data...\n",
            "[nltk_data]   Package punkt is already up-to-date!\n",
            "[nltk_data] Downloading package punkt_tab to /root/nltk_data...\n",
            "[nltk_data]   Package punkt_tab is already up-to-date!\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Import CSVs + Split Data"
      ],
      "metadata": {
        "id": "GYISCuQqvPpq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def read_from_csv(csv_name):\n",
        "  df = pd.read_csv('/content/drive/My Drive/ColabNotebooks/'+ csv_name, encoding='UTF-8')\n",
        "  return df\n",
        "\n",
        "ExternalComments = read_from_csv('ExternalComments.csv')\n",
        "InternalComments = read_from_csv('InternalComments.csv')\n",
        "\n",
        "def split_data(split = 0.9):\n",
        "  ec_length = len(ExternalComments)\n",
        "  ec_test_split = int(ec_length * split)\n",
        "  ec_train = ExternalComments[0:ec_test_split]\n",
        "  ec_test = ExternalComments[ec_test_split:]\n",
        "\n",
        "  ic_length = len(InternalComments)\n",
        "  ic_test_split = int(ic_length * split)\n",
        "  ic_train = InternalComments[0:ic_test_split]\n",
        "  ic_test = InternalComments[ic_test_split:]\n",
        "\n",
        "  return ec_train, ec_test, ic_train, ic_test\n",
        "\n",
        "ec_train, ec_test, ic_train, ic_test = split_data()\n"
      ],
      "metadata": {
        "id": "h3OkI7vkjB3j"
      },
      "execution_count": 108,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Tokenising + Pre-Processing"
      ],
      "metadata": {
        "id": "CwLQgv85oy2T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from nltk.stem import PorterStemmer       #importing stemming from NLTK\n",
        "ps = PorterStemmer()\n",
        "\n",
        "from nltk.stem import WordNetLemmatizer  #importing lemmatization from NLTK\n",
        "lemmatizer = WordNetLemmatizer()\n",
        "\n",
        "_ignore = stopwords.words('english')\n",
        "\n",
        "def tokenize_comment(comment):\n",
        "  comment_subbed = re.sub(r'[^\\w\\s]', ' ', comment)\n",
        "  comment_subbed = re.sub('_', ' ', comment_subbed)\n",
        "  tokens = word_tokenize(comment_subbed)\n",
        "  return tokens\n",
        "\n",
        "def produce_dictionary(tokenised_comment):\n",
        "  dictionary = {}\n",
        "  for word in tokenised_comment:\n",
        "    word = word.lower()\n",
        "    stem = ps.stem(word)\n",
        "    lemma = lemmatizer.lemmatize(stem)\n",
        "    if lemma not in _ignore:\n",
        "      dictionary[lemma] = dictionary.get(lemma, 0) + 1\n",
        "  return dictionary"
      ],
      "metadata": {
        "id": "u5wmDNZ5jpvr"
      },
      "execution_count": 99,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tokens = tokenize_comment(ExternalComments[\"Comment\"][0])\n",
        "print(tokens)\n",
        "\n",
        "dictionary = produce_dictionary(tokens)\n",
        "print(dictionary)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bO0CDNlIqgfj",
        "outputId": "ba62beb2-305f-4ce9-cf2a-3237f3eff8f9"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Hi', 'Ethan', 'Michael', 'I', 'have', 'created', 'these', 'resource', 'for', 'you', 'and', 'updated', 'them', 'in', 'ITAM', 'Olly']\n",
            "{'hi': 1, 'ethan': 1, 'michael': 1, 'creat': 1, 'resourc': 1, 'updat': 1, 'itam': 1, 'olli': 1}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Naive Bayes"
      ],
      "metadata": {
        "id": "LJocS1ObvJey"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def collate_dictionaries(train_set):\n",
        "  good_collated_dictionary = {}\n",
        "  bad_collated_dictionary = {}\n",
        "  for index, row in train_set.iterrows():\n",
        "    tokens = tokenize_comment(row['Comment'])\n",
        "    dictionary = produce_dictionary(tokens)\n",
        "\n",
        "    if (row['Status'] == 'Good'):\n",
        "      for key in dictionary:\n",
        "        good_collated_dictionary[key] = good_collated_dictionary.get(key, 0) + dictionary[key]\n",
        "    else:\n",
        "      for key in dictionary:\n",
        "        bad_collated_dictionary[key] = bad_collated_dictionary.get(key, 0) + dictionary[key]\n",
        "\n",
        "  return good_collated_dictionary, bad_collated_dictionary\n",
        "\n",
        "good_ec_dictionary, bad_ec_dictionary = collate_dictionaries(ec_train)\n",
        "good_ic_dictionary, bad_ic_dictionary = collate_dictionaries(ic_train)\n",
        "\n",
        "\n",
        "\n",
        "def get_total_counts(good_ec_dictionary, bad_ec_dictionary, good_ic_dictionary, bad_ic_dictionary):\n",
        "  good_ec_total = 0\n",
        "  bad_ec_total = 0\n",
        "  good_ic_total = 0\n",
        "  bad_ic_total = 0\n",
        "  for key in good_ec_dictionary:\n",
        "    good_ec_total += good_ec_dictionary[key]\n",
        "  for key in bad_ec_dictionary:\n",
        "    bad_ec_total += bad_ec_dictionary[key]\n",
        "\n",
        "  for key in good_ic_dictionary:\n",
        "    good_ic_total += good_ic_dictionary[key]\n",
        "  for key in bad_ic_dictionary:\n",
        "    bad_ic_total += bad_ic_dictionary[key]\n",
        "\n",
        "  return good_ec_total, bad_ec_total, good_ic_total, bad_ic_total\n",
        "\n",
        "good_ec_total, bad_ec_total, good_ic_total, bad_ic_total = get_total_counts(good_ec_dictionary, bad_ec_dictionary, good_ic_dictionary, bad_ic_dictionary)\n",
        "\n",
        "\n",
        "\n",
        "def naive_bayes_prediction(comment, good_dictionary, bad_dictionary, good_total, bad_total):\n",
        "  tokens = tokenize_comment(comment)\n",
        "  dictionary = produce_dictionary(tokens)\n",
        "\n",
        "  good_probability = 1\n",
        "  bad_probability = 1\n",
        "\n",
        "  # probability A | B\n",
        "  for key in dictionary:\n",
        "    good_probability *= ((good_dictionary.get(key, 0) + 1) / good_total)\n",
        "    bad_probability *= ((bad_dictionary.get(key, 0) + 1) / bad_total)\n",
        "\n",
        "  # probability B\n",
        "  good_probability *= (good_total / (good_total + bad_total))\n",
        "  bad_probability *= (bad_total / (good_total + bad_total))\n",
        "\n",
        "  if (good_probability > bad_probability):\n",
        "    return 'Good'\n",
        "  else:\n",
        "    return 'Bad'\n"
      ],
      "metadata": {
        "id": "4ZfoE7mUvJK6"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "TP = 0\n",
        "FP = 0\n",
        "FN = 0\n",
        "TN = 0\n",
        "\n",
        "for x in range(779,len(ExternalComments)):\n",
        "  prediction = naive_bayes_prediction(ExternalComments[\"Comment\"][x], good_ec_dictionary, bad_ec_dictionary, good_ec_total, bad_ec_total)\n",
        "  if (prediction == 'Good'):\n",
        "    if (ExternalComments[\"Status\"][x] == 'Good'):\n",
        "      TP += 1\n",
        "    else:\n",
        "      FP += 1\n",
        "  else:\n",
        "    if (ExternalComments[\"Status\"][x] == 'Good'):\n",
        "      FN += 1\n",
        "    else:\n",
        "      TN += 1\n",
        "\n",
        "\n",
        "print(TP)\n",
        "print(FP)\n",
        "print(FN)\n",
        "print(TN)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VX1bLrOJAxKT",
        "outputId": "7f2d900c-093b-4aba-8b1b-811ad51cdf83"
      },
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "57\n",
            "14\n",
            "10\n",
            "6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "NaiveAcc = []\n",
        "NaivePrec = []\n",
        "NaiveRec = []\n",
        "\n",
        "def run_NB_test(data_split):\n",
        "  ec_train, ec_test, ic_train, ic_test = split_data(data_split)\n",
        "\n",
        "  good_ec_dictionary, bad_ec_dictionary = collate_dictionaries(ec_train)\n",
        "  good_ic_dictionary, bad_ic_dictionary = collate_dictionaries(ic_train)\n",
        "\n",
        "  good_ec_total, bad_ec_total, good_ic_total, bad_ic_total = get_total_counts(good_ec_dictionary, bad_ec_dictionary, good_ic_dictionary, bad_ic_dictionary)\n",
        "\n",
        "  data_start = len(ec_train) + 1\n",
        "\n",
        "  TP = 0\n",
        "  FP = 0\n",
        "  FN = 0\n",
        "  TN = 0\n",
        "\n",
        "  for x in range(data_start,len(ExternalComments)):\n",
        "    prediction = naive_bayes_prediction(ExternalComments[\"Comment\"][x], good_ec_dictionary, bad_ec_dictionary, good_ec_total, bad_ec_total)\n",
        "    if (prediction == 'Good'):\n",
        "      if (ExternalComments[\"Status\"][x] == 'Good'):\n",
        "        TP += 1\n",
        "      else:\n",
        "        FP += 1\n",
        "    else:\n",
        "      if (ExternalComments[\"Status\"][x] == 'Good'):\n",
        "        FN += 1\n",
        "      else:\n",
        "        TN += 1\n",
        "\n",
        "  NaiveAcc.append((TP+TN)/(TP+TN+FP+FN))\n",
        "  NaivePrec.append((TP)/(TP+FP))\n",
        "  NaiveRec.append((TP)/(TP+FN))\n",
        "\n",
        "\n",
        "run_NB_test(0.95)\n",
        "run_NB_test(0.9)\n",
        "run_NB_test(0.85)\n",
        "run_NB_test(0.8)\n",
        "run_NB_test(0.75)\n",
        "run_NB_test(0.7)\n",
        "run_NB_test(0.65)\n",
        "run_NB_test(0.6)\n",
        "run_NB_test(0.55)\n",
        "run_NB_test(0.50)\n"
      ],
      "metadata": {
        "id": "96_4ArkRDNzr"
      },
      "execution_count": 131,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scale = [95,90,85,80,75,70,65,60,55,50]\n",
        "\n",
        "graph = pd.DataFrame({'Accuracy' : NaiveAcc, 'Precision' : NaivePrec, 'Recall' : NaiveRec}, scale)\n",
        "ax = graph.plot(title=\"Accuracy, Precision, and Recall over different testing/training splits.\")\n",
        "ax.set(xlabel=\"Training Data (% of total)\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "ls5GdfiDEz_8",
        "outputId": "9ad6f152-a11b-4a67-cfe2-c8608ff51b76"
      },
      "execution_count": 133,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[Text(0.5, 0, 'Training Data (% of total)')]"
            ]
          },
          "metadata": {},
          "execution_count": 133
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}